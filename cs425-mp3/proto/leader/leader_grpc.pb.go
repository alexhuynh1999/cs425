// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: proto/leader/leader.proto

package leader

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LeaderClient is the client API for Leader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LeaderClient interface {
	Join(ctx context.Context, opts ...grpc.CallOption) (Leader_JoinClient, error)
	ShowFileInDataNode(ctx context.Context, in *NodeAddress, opts ...grpc.CallOption) (*LocalFileNames, error)
	JoinStandby(ctx context.Context, opts ...grpc.CallOption) (Leader_JoinStandbyClient, error)
	Query(ctx context.Context, in *GeneralMessage, opts ...grpc.CallOption) (*GeneralMessage, error)
}

type leaderClient struct {
	cc grpc.ClientConnInterface
}

func NewLeaderClient(cc grpc.ClientConnInterface) LeaderClient {
	return &leaderClient{cc}
}

func (c *leaderClient) Join(ctx context.Context, opts ...grpc.CallOption) (Leader_JoinClient, error) {
	stream, err := c.cc.NewStream(ctx, &Leader_ServiceDesc.Streams[0], "/leader.Leader/Join", opts...)
	if err != nil {
		return nil, err
	}
	x := &leaderJoinClient{stream}
	return x, nil
}

type Leader_JoinClient interface {
	Send(*Hb) error
	Recv() (*MemberList, error)
	grpc.ClientStream
}

type leaderJoinClient struct {
	grpc.ClientStream
}

func (x *leaderJoinClient) Send(m *Hb) error {
	return x.ClientStream.SendMsg(m)
}

func (x *leaderJoinClient) Recv() (*MemberList, error) {
	m := new(MemberList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *leaderClient) ShowFileInDataNode(ctx context.Context, in *NodeAddress, opts ...grpc.CallOption) (*LocalFileNames, error) {
	out := new(LocalFileNames)
	err := c.cc.Invoke(ctx, "/leader.Leader/ShowFileInDataNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderClient) JoinStandby(ctx context.Context, opts ...grpc.CallOption) (Leader_JoinStandbyClient, error) {
	stream, err := c.cc.NewStream(ctx, &Leader_ServiceDesc.Streams[1], "/leader.Leader/JoinStandby", opts...)
	if err != nil {
		return nil, err
	}
	x := &leaderJoinStandbyClient{stream}
	return x, nil
}

type Leader_JoinStandbyClient interface {
	Send(*StandbyHb) error
	Recv() (*NetworkMembers, error)
	grpc.ClientStream
}

type leaderJoinStandbyClient struct {
	grpc.ClientStream
}

func (x *leaderJoinStandbyClient) Send(m *StandbyHb) error {
	return x.ClientStream.SendMsg(m)
}

func (x *leaderJoinStandbyClient) Recv() (*NetworkMembers, error) {
	m := new(NetworkMembers)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *leaderClient) Query(ctx context.Context, in *GeneralMessage, opts ...grpc.CallOption) (*GeneralMessage, error) {
	out := new(GeneralMessage)
	err := c.cc.Invoke(ctx, "/leader.Leader/query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeaderServer is the server API for Leader service.
// All implementations must embed UnimplementedLeaderServer
// for forward compatibility
type LeaderServer interface {
	Join(Leader_JoinServer) error
	ShowFileInDataNode(context.Context, *NodeAddress) (*LocalFileNames, error)
	JoinStandby(Leader_JoinStandbyServer) error
	Query(context.Context, *GeneralMessage) (*GeneralMessage, error)
	mustEmbedUnimplementedLeaderServer()
}

// UnimplementedLeaderServer must be embedded to have forward compatible implementations.
type UnimplementedLeaderServer struct {
}

func (UnimplementedLeaderServer) Join(Leader_JoinServer) error {
	return status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedLeaderServer) ShowFileInDataNode(context.Context, *NodeAddress) (*LocalFileNames, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowFileInDataNode not implemented")
}
func (UnimplementedLeaderServer) JoinStandby(Leader_JoinStandbyServer) error {
	return status.Errorf(codes.Unimplemented, "method JoinStandby not implemented")
}
func (UnimplementedLeaderServer) Query(context.Context, *GeneralMessage) (*GeneralMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedLeaderServer) mustEmbedUnimplementedLeaderServer() {}

// UnsafeLeaderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeaderServer will
// result in compilation errors.
type UnsafeLeaderServer interface {
	mustEmbedUnimplementedLeaderServer()
}

func RegisterLeaderServer(s grpc.ServiceRegistrar, srv LeaderServer) {
	s.RegisterService(&Leader_ServiceDesc, srv)
}

func _Leader_Join_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LeaderServer).Join(&leaderJoinServer{stream})
}

type Leader_JoinServer interface {
	Send(*MemberList) error
	Recv() (*Hb, error)
	grpc.ServerStream
}

type leaderJoinServer struct {
	grpc.ServerStream
}

func (x *leaderJoinServer) Send(m *MemberList) error {
	return x.ServerStream.SendMsg(m)
}

func (x *leaderJoinServer) Recv() (*Hb, error) {
	m := new(Hb)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Leader_ShowFileInDataNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderServer).ShowFileInDataNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leader.Leader/ShowFileInDataNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderServer).ShowFileInDataNode(ctx, req.(*NodeAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Leader_JoinStandby_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LeaderServer).JoinStandby(&leaderJoinStandbyServer{stream})
}

type Leader_JoinStandbyServer interface {
	Send(*NetworkMembers) error
	Recv() (*StandbyHb, error)
	grpc.ServerStream
}

type leaderJoinStandbyServer struct {
	grpc.ServerStream
}

func (x *leaderJoinStandbyServer) Send(m *NetworkMembers) error {
	return x.ServerStream.SendMsg(m)
}

func (x *leaderJoinStandbyServer) Recv() (*StandbyHb, error) {
	m := new(StandbyHb)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Leader_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeneralMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leader.Leader/query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderServer).Query(ctx, req.(*GeneralMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// Leader_ServiceDesc is the grpc.ServiceDesc for Leader service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Leader_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "leader.Leader",
	HandlerType: (*LeaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShowFileInDataNode",
			Handler:    _Leader_ShowFileInDataNode_Handler,
		},
		{
			MethodName: "query",
			Handler:    _Leader_Query_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Join",
			Handler:       _Leader_Join_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "JoinStandby",
			Handler:       _Leader_JoinStandby_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/leader/leader.proto",
}
