// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: proto/data_node/data_node.proto

package data

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataClient is the client API for Data service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataClient interface {
	Promote(ctx context.Context, in *NetworkMembers, opts ...grpc.CallOption) (*Ack, error)
	GetActiveLeader(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Leader, error)
	UpdateActiveLeader(ctx context.Context, in *Leader, opts ...grpc.CallOption) (*Ack, error)
	Read(ctx context.Context, in *ReadName, opts ...grpc.CallOption) (*FileContent, error)
	Write(ctx context.Context, in *WriteFile, opts ...grpc.CallOption) (*Ack, error)
	Delete(ctx context.Context, in *DeleteFile, opts ...grpc.CallOption) (*Ack, error)
}

type dataClient struct {
	cc grpc.ClientConnInterface
}

func NewDataClient(cc grpc.ClientConnInterface) DataClient {
	return &dataClient{cc}
}

func (c *dataClient) Promote(ctx context.Context, in *NetworkMembers, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/data.Data/Promote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetActiveLeader(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Leader, error) {
	out := new(Leader)
	err := c.cc.Invoke(ctx, "/data.Data/GetActiveLeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) UpdateActiveLeader(ctx context.Context, in *Leader, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/data.Data/UpdateActiveLeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) Read(ctx context.Context, in *ReadName, opts ...grpc.CallOption) (*FileContent, error) {
	out := new(FileContent)
	err := c.cc.Invoke(ctx, "/data.Data/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) Write(ctx context.Context, in *WriteFile, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/data.Data/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) Delete(ctx context.Context, in *DeleteFile, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/data.Data/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataServer is the server API for Data service.
// All implementations must embed UnimplementedDataServer
// for forward compatibility
type DataServer interface {
	Promote(context.Context, *NetworkMembers) (*Ack, error)
	GetActiveLeader(context.Context, *Empty) (*Leader, error)
	UpdateActiveLeader(context.Context, *Leader) (*Ack, error)
	Read(context.Context, *ReadName) (*FileContent, error)
	Write(context.Context, *WriteFile) (*Ack, error)
	Delete(context.Context, *DeleteFile) (*Ack, error)
	mustEmbedUnimplementedDataServer()
}

// UnimplementedDataServer must be embedded to have forward compatible implementations.
type UnimplementedDataServer struct {
}

func (UnimplementedDataServer) Promote(context.Context, *NetworkMembers) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Promote not implemented")
}
func (UnimplementedDataServer) GetActiveLeader(context.Context, *Empty) (*Leader, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveLeader not implemented")
}
func (UnimplementedDataServer) UpdateActiveLeader(context.Context, *Leader) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateActiveLeader not implemented")
}
func (UnimplementedDataServer) Read(context.Context, *ReadName) (*FileContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedDataServer) Write(context.Context, *WriteFile) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedDataServer) Delete(context.Context, *DeleteFile) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDataServer) mustEmbedUnimplementedDataServer() {}

// UnsafeDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataServer will
// result in compilation errors.
type UnsafeDataServer interface {
	mustEmbedUnimplementedDataServer()
}

func RegisterDataServer(s grpc.ServiceRegistrar, srv DataServer) {
	s.RegisterService(&Data_ServiceDesc, srv)
}

func _Data_Promote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkMembers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).Promote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/Promote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).Promote(ctx, req.(*NetworkMembers))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetActiveLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetActiveLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/GetActiveLeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetActiveLeader(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_UpdateActiveLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Leader)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).UpdateActiveLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/UpdateActiveLeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).UpdateActiveLeader(ctx, req.(*Leader))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).Read(ctx, req.(*ReadName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).Write(ctx, req.(*WriteFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).Delete(ctx, req.(*DeleteFile))
	}
	return interceptor(ctx, in, info, handler)
}

// Data_ServiceDesc is the grpc.ServiceDesc for Data service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Data_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "data.Data",
	HandlerType: (*DataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Promote",
			Handler:    _Data_Promote_Handler,
		},
		{
			MethodName: "GetActiveLeader",
			Handler:    _Data_GetActiveLeader_Handler,
		},
		{
			MethodName: "UpdateActiveLeader",
			Handler:    _Data_UpdateActiveLeader_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Data_Read_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _Data_Write_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Data_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/data_node/data_node.proto",
}
