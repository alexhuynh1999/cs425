// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: proto/worker/worker.proto

package worker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkerClient is the client API for Worker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkerClient interface {
	// Jobs called on by the coordinator
	// / NOTE: None of this should be client-facing
	// / Previous MP services
	Put(ctx context.Context, in *File, opts ...grpc.CallOption) (*Ack, error)
	Get(ctx context.Context, in *File, opts ...grpc.CallOption) (*File, error)
	Delete(ctx context.Context, in *File, opts ...grpc.CallOption) (*Ack, error)
	GetVersion(ctx context.Context, in *FileVersions, opts ...grpc.CallOption) (*File, error)
	// / MP4 services
	Train(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Ack, error)
	Inference(ctx context.Context, opts ...grpc.CallOption) (Worker_InferenceClient, error)
	RestartInference(ctx context.Context, in *InferenceRequest, opts ...grpc.CallOption) (*Ack, error)
	// Network topology services
	ElectStandby(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Ack, error)
	UpdateActive(ctx context.Context, in *Coordinator, opts ...grpc.CallOption) (*Ack, error)
	GetActive(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Coordinator, error)
}

type workerClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerClient(cc grpc.ClientConnInterface) WorkerClient {
	return &workerClient{cc}
}

func (c *workerClient) Put(ctx context.Context, in *File, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/worker.Worker/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) Get(ctx context.Context, in *File, opts ...grpc.CallOption) (*File, error) {
	out := new(File)
	err := c.cc.Invoke(ctx, "/worker.Worker/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) Delete(ctx context.Context, in *File, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/worker.Worker/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) GetVersion(ctx context.Context, in *FileVersions, opts ...grpc.CallOption) (*File, error) {
	out := new(File)
	err := c.cc.Invoke(ctx, "/worker.Worker/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) Train(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/worker.Worker/Train", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) Inference(ctx context.Context, opts ...grpc.CallOption) (Worker_InferenceClient, error) {
	stream, err := c.cc.NewStream(ctx, &Worker_ServiceDesc.Streams[0], "/worker.Worker/Inference", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerInferenceClient{stream}
	return x, nil
}

type Worker_InferenceClient interface {
	Send(*Query) error
	Recv() (*QueryResults, error)
	grpc.ClientStream
}

type workerInferenceClient struct {
	grpc.ClientStream
}

func (x *workerInferenceClient) Send(m *Query) error {
	return x.ClientStream.SendMsg(m)
}

func (x *workerInferenceClient) Recv() (*QueryResults, error) {
	m := new(QueryResults)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workerClient) RestartInference(ctx context.Context, in *InferenceRequest, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/worker.Worker/RestartInference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) ElectStandby(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/worker.Worker/ElectStandby", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) UpdateActive(ctx context.Context, in *Coordinator, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/worker.Worker/UpdateActive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) GetActive(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Coordinator, error) {
	out := new(Coordinator)
	err := c.cc.Invoke(ctx, "/worker.Worker/GetActive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkerServer is the server API for Worker service.
// All implementations must embed UnimplementedWorkerServer
// for forward compatibility
type WorkerServer interface {
	// Jobs called on by the coordinator
	// / NOTE: None of this should be client-facing
	// / Previous MP services
	Put(context.Context, *File) (*Ack, error)
	Get(context.Context, *File) (*File, error)
	Delete(context.Context, *File) (*Ack, error)
	GetVersion(context.Context, *FileVersions) (*File, error)
	// / MP4 services
	Train(context.Context, *Job) (*Ack, error)
	Inference(Worker_InferenceServer) error
	RestartInference(context.Context, *InferenceRequest) (*Ack, error)
	// Network topology services
	ElectStandby(context.Context, *Empty) (*Ack, error)
	UpdateActive(context.Context, *Coordinator) (*Ack, error)
	GetActive(context.Context, *Empty) (*Coordinator, error)
	mustEmbedUnimplementedWorkerServer()
}

// UnimplementedWorkerServer must be embedded to have forward compatible implementations.
type UnimplementedWorkerServer struct {
}

func (UnimplementedWorkerServer) Put(context.Context, *File) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedWorkerServer) Get(context.Context, *File) (*File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedWorkerServer) Delete(context.Context, *File) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedWorkerServer) GetVersion(context.Context, *FileVersions) (*File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedWorkerServer) Train(context.Context, *Job) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Train not implemented")
}
func (UnimplementedWorkerServer) Inference(Worker_InferenceServer) error {
	return status.Errorf(codes.Unimplemented, "method Inference not implemented")
}
func (UnimplementedWorkerServer) RestartInference(context.Context, *InferenceRequest) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartInference not implemented")
}
func (UnimplementedWorkerServer) ElectStandby(context.Context, *Empty) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ElectStandby not implemented")
}
func (UnimplementedWorkerServer) UpdateActive(context.Context, *Coordinator) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateActive not implemented")
}
func (UnimplementedWorkerServer) GetActive(context.Context, *Empty) (*Coordinator, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActive not implemented")
}
func (UnimplementedWorkerServer) mustEmbedUnimplementedWorkerServer() {}

// UnsafeWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkerServer will
// result in compilation errors.
type UnsafeWorkerServer interface {
	mustEmbedUnimplementedWorkerServer()
}

func RegisterWorkerServer(s grpc.ServiceRegistrar, srv WorkerServer) {
	s.RegisterService(&Worker_ServiceDesc, srv)
}

func _Worker_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(File)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worker.Worker/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).Put(ctx, req.(*File))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(File)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worker.Worker/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).Get(ctx, req.(*File))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(File)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worker.Worker/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).Delete(ctx, req.(*File))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileVersions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worker.Worker/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).GetVersion(ctx, req.(*FileVersions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_Train_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).Train(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worker.Worker/Train",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).Train(ctx, req.(*Job))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_Inference_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WorkerServer).Inference(&workerInferenceServer{stream})
}

type Worker_InferenceServer interface {
	Send(*QueryResults) error
	Recv() (*Query, error)
	grpc.ServerStream
}

type workerInferenceServer struct {
	grpc.ServerStream
}

func (x *workerInferenceServer) Send(m *QueryResults) error {
	return x.ServerStream.SendMsg(m)
}

func (x *workerInferenceServer) Recv() (*Query, error) {
	m := new(Query)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Worker_RestartInference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).RestartInference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worker.Worker/RestartInference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).RestartInference(ctx, req.(*InferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_ElectStandby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).ElectStandby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worker.Worker/ElectStandby",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).ElectStandby(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_UpdateActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Coordinator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).UpdateActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worker.Worker/UpdateActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).UpdateActive(ctx, req.(*Coordinator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_GetActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).GetActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worker.Worker/GetActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).GetActive(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Worker_ServiceDesc is the grpc.ServiceDesc for Worker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Worker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "worker.Worker",
	HandlerType: (*WorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _Worker_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Worker_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Worker_Delete_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _Worker_GetVersion_Handler,
		},
		{
			MethodName: "Train",
			Handler:    _Worker_Train_Handler,
		},
		{
			MethodName: "RestartInference",
			Handler:    _Worker_RestartInference_Handler,
		},
		{
			MethodName: "ElectStandby",
			Handler:    _Worker_ElectStandby_Handler,
		},
		{
			MethodName: "UpdateActive",
			Handler:    _Worker_UpdateActive_Handler,
		},
		{
			MethodName: "GetActive",
			Handler:    _Worker_GetActive_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Inference",
			Handler:       _Worker_Inference_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/worker/worker.proto",
}
