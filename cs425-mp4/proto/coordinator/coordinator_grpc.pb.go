// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: proto/coordinator/coordinator.proto

package coordinator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CoordinatorClient is the client API for Coordinator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoordinatorClient interface {
	// Client-facing services
	// / Previous MP services
	ListFiles(ctx context.Context, in *File, opts ...grpc.CallOption) (*FileLocations, error)
	Store(ctx context.Context, in *Heartbeat, opts ...grpc.CallOption) (*FileList, error)
	GetMembers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MemberList, error)
	// / Services that route to worker nodes
	Put(ctx context.Context, in *File, opts ...grpc.CallOption) (*Ack, error)
	Get(ctx context.Context, in *File, opts ...grpc.CallOption) (*File, error)
	GetVersion(ctx context.Context, in *FileVersions, opts ...grpc.CallOption) (*File, error)
	Delete(ctx context.Context, in *File, opts ...grpc.CallOption) (*Ack, error)
	// // MP4 Services
	Train(ctx context.Context, in *Hyperparameters, opts ...grpc.CallOption) (*Ack, error)
	Inference(ctx context.Context, opts ...grpc.CallOption) (Coordinator_InferenceClient, error)
	GetRate(ctx context.Context, in *Model, opts ...grpc.CallOption) (*C1, error)
	Stats(ctx context.Context, in *Model, opts ...grpc.CallOption) (*C2, error)
	SetBatchSize(ctx context.Context, in *Model, opts ...grpc.CallOption) (*Ack, error)
	ShowJobs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*C4, error)
	GetResults(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Results, error)
	// /// Active -> Standby
	CreateModel(ctx context.Context, in *ModelInfo, opts ...grpc.CallOption) (*Ack, error)
	UpdateModel(ctx context.Context, in *ModelStats, opts ...grpc.CallOption) (*Ack, error)
	UpdateJobStatus(ctx context.Context, in *Status, opts ...grpc.CallOption) (*Ack, error)
	// Internal coordination services
	Join(ctx context.Context, opts ...grpc.CallOption) (Coordinator_JoinClient, error)
	UpdateNetworkInfo(ctx context.Context, in *NetworkInfo, opts ...grpc.CallOption) (*Ack, error)
	DeleteNetworkInfo(ctx context.Context, in *DeleteNetwork, opts ...grpc.CallOption) (*Ack, error)
}

type coordinatorClient struct {
	cc grpc.ClientConnInterface
}

func NewCoordinatorClient(cc grpc.ClientConnInterface) CoordinatorClient {
	return &coordinatorClient{cc}
}

func (c *coordinatorClient) ListFiles(ctx context.Context, in *File, opts ...grpc.CallOption) (*FileLocations, error) {
	out := new(FileLocations)
	err := c.cc.Invoke(ctx, "/coordinator.Coordinator/ListFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) Store(ctx context.Context, in *Heartbeat, opts ...grpc.CallOption) (*FileList, error) {
	out := new(FileList)
	err := c.cc.Invoke(ctx, "/coordinator.Coordinator/Store", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) GetMembers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MemberList, error) {
	out := new(MemberList)
	err := c.cc.Invoke(ctx, "/coordinator.Coordinator/GetMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) Put(ctx context.Context, in *File, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/coordinator.Coordinator/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) Get(ctx context.Context, in *File, opts ...grpc.CallOption) (*File, error) {
	out := new(File)
	err := c.cc.Invoke(ctx, "/coordinator.Coordinator/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) GetVersion(ctx context.Context, in *FileVersions, opts ...grpc.CallOption) (*File, error) {
	out := new(File)
	err := c.cc.Invoke(ctx, "/coordinator.Coordinator/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) Delete(ctx context.Context, in *File, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/coordinator.Coordinator/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) Train(ctx context.Context, in *Hyperparameters, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/coordinator.Coordinator/Train", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) Inference(ctx context.Context, opts ...grpc.CallOption) (Coordinator_InferenceClient, error) {
	stream, err := c.cc.NewStream(ctx, &Coordinator_ServiceDesc.Streams[0], "/coordinator.Coordinator/Inference", opts...)
	if err != nil {
		return nil, err
	}
	x := &coordinatorInferenceClient{stream}
	return x, nil
}

type Coordinator_InferenceClient interface {
	Send(*Query) error
	Recv() (*QueryResults, error)
	grpc.ClientStream
}

type coordinatorInferenceClient struct {
	grpc.ClientStream
}

func (x *coordinatorInferenceClient) Send(m *Query) error {
	return x.ClientStream.SendMsg(m)
}

func (x *coordinatorInferenceClient) Recv() (*QueryResults, error) {
	m := new(QueryResults)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coordinatorClient) GetRate(ctx context.Context, in *Model, opts ...grpc.CallOption) (*C1, error) {
	out := new(C1)
	err := c.cc.Invoke(ctx, "/coordinator.Coordinator/GetRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) Stats(ctx context.Context, in *Model, opts ...grpc.CallOption) (*C2, error) {
	out := new(C2)
	err := c.cc.Invoke(ctx, "/coordinator.Coordinator/Stats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) SetBatchSize(ctx context.Context, in *Model, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/coordinator.Coordinator/SetBatchSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) ShowJobs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*C4, error) {
	out := new(C4)
	err := c.cc.Invoke(ctx, "/coordinator.Coordinator/ShowJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) GetResults(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Results, error) {
	out := new(Results)
	err := c.cc.Invoke(ctx, "/coordinator.Coordinator/GetResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) CreateModel(ctx context.Context, in *ModelInfo, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/coordinator.Coordinator/CreateModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) UpdateModel(ctx context.Context, in *ModelStats, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/coordinator.Coordinator/UpdateModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) UpdateJobStatus(ctx context.Context, in *Status, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/coordinator.Coordinator/UpdateJobStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) Join(ctx context.Context, opts ...grpc.CallOption) (Coordinator_JoinClient, error) {
	stream, err := c.cc.NewStream(ctx, &Coordinator_ServiceDesc.Streams[1], "/coordinator.Coordinator/Join", opts...)
	if err != nil {
		return nil, err
	}
	x := &coordinatorJoinClient{stream}
	return x, nil
}

type Coordinator_JoinClient interface {
	Send(*Heartbeat) error
	CloseAndRecv() (*Ack, error)
	grpc.ClientStream
}

type coordinatorJoinClient struct {
	grpc.ClientStream
}

func (x *coordinatorJoinClient) Send(m *Heartbeat) error {
	return x.ClientStream.SendMsg(m)
}

func (x *coordinatorJoinClient) CloseAndRecv() (*Ack, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Ack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coordinatorClient) UpdateNetworkInfo(ctx context.Context, in *NetworkInfo, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/coordinator.Coordinator/UpdateNetworkInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) DeleteNetworkInfo(ctx context.Context, in *DeleteNetwork, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/coordinator.Coordinator/DeleteNetworkInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoordinatorServer is the server API for Coordinator service.
// All implementations must embed UnimplementedCoordinatorServer
// for forward compatibility
type CoordinatorServer interface {
	// Client-facing services
	// / Previous MP services
	ListFiles(context.Context, *File) (*FileLocations, error)
	Store(context.Context, *Heartbeat) (*FileList, error)
	GetMembers(context.Context, *Empty) (*MemberList, error)
	// / Services that route to worker nodes
	Put(context.Context, *File) (*Ack, error)
	Get(context.Context, *File) (*File, error)
	GetVersion(context.Context, *FileVersions) (*File, error)
	Delete(context.Context, *File) (*Ack, error)
	// // MP4 Services
	Train(context.Context, *Hyperparameters) (*Ack, error)
	Inference(Coordinator_InferenceServer) error
	GetRate(context.Context, *Model) (*C1, error)
	Stats(context.Context, *Model) (*C2, error)
	SetBatchSize(context.Context, *Model) (*Ack, error)
	ShowJobs(context.Context, *Empty) (*C4, error)
	GetResults(context.Context, *Empty) (*Results, error)
	// /// Active -> Standby
	CreateModel(context.Context, *ModelInfo) (*Ack, error)
	UpdateModel(context.Context, *ModelStats) (*Ack, error)
	UpdateJobStatus(context.Context, *Status) (*Ack, error)
	// Internal coordination services
	Join(Coordinator_JoinServer) error
	UpdateNetworkInfo(context.Context, *NetworkInfo) (*Ack, error)
	DeleteNetworkInfo(context.Context, *DeleteNetwork) (*Ack, error)
	mustEmbedUnimplementedCoordinatorServer()
}

// UnimplementedCoordinatorServer must be embedded to have forward compatible implementations.
type UnimplementedCoordinatorServer struct {
}

func (UnimplementedCoordinatorServer) ListFiles(context.Context, *File) (*FileLocations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFiles not implemented")
}
func (UnimplementedCoordinatorServer) Store(context.Context, *Heartbeat) (*FileList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedCoordinatorServer) GetMembers(context.Context, *Empty) (*MemberList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMembers not implemented")
}
func (UnimplementedCoordinatorServer) Put(context.Context, *File) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedCoordinatorServer) Get(context.Context, *File) (*File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCoordinatorServer) GetVersion(context.Context, *FileVersions) (*File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedCoordinatorServer) Delete(context.Context, *File) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCoordinatorServer) Train(context.Context, *Hyperparameters) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Train not implemented")
}
func (UnimplementedCoordinatorServer) Inference(Coordinator_InferenceServer) error {
	return status.Errorf(codes.Unimplemented, "method Inference not implemented")
}
func (UnimplementedCoordinatorServer) GetRate(context.Context, *Model) (*C1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRate not implemented")
}
func (UnimplementedCoordinatorServer) Stats(context.Context, *Model) (*C2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stats not implemented")
}
func (UnimplementedCoordinatorServer) SetBatchSize(context.Context, *Model) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBatchSize not implemented")
}
func (UnimplementedCoordinatorServer) ShowJobs(context.Context, *Empty) (*C4, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowJobs not implemented")
}
func (UnimplementedCoordinatorServer) GetResults(context.Context, *Empty) (*Results, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResults not implemented")
}
func (UnimplementedCoordinatorServer) CreateModel(context.Context, *ModelInfo) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModel not implemented")
}
func (UnimplementedCoordinatorServer) UpdateModel(context.Context, *ModelStats) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModel not implemented")
}
func (UnimplementedCoordinatorServer) UpdateJobStatus(context.Context, *Status) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJobStatus not implemented")
}
func (UnimplementedCoordinatorServer) Join(Coordinator_JoinServer) error {
	return status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedCoordinatorServer) UpdateNetworkInfo(context.Context, *NetworkInfo) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNetworkInfo not implemented")
}
func (UnimplementedCoordinatorServer) DeleteNetworkInfo(context.Context, *DeleteNetwork) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNetworkInfo not implemented")
}
func (UnimplementedCoordinatorServer) mustEmbedUnimplementedCoordinatorServer() {}

// UnsafeCoordinatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoordinatorServer will
// result in compilation errors.
type UnsafeCoordinatorServer interface {
	mustEmbedUnimplementedCoordinatorServer()
}

func RegisterCoordinatorServer(s grpc.ServiceRegistrar, srv CoordinatorServer) {
	s.RegisterService(&Coordinator_ServiceDesc, srv)
}

func _Coordinator_ListFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(File)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).ListFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coordinator.Coordinator/ListFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).ListFiles(ctx, req.(*File))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Heartbeat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coordinator.Coordinator/Store",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).Store(ctx, req.(*Heartbeat))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_GetMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).GetMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coordinator.Coordinator/GetMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).GetMembers(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(File)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coordinator.Coordinator/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).Put(ctx, req.(*File))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(File)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coordinator.Coordinator/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).Get(ctx, req.(*File))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileVersions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coordinator.Coordinator/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).GetVersion(ctx, req.(*FileVersions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(File)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coordinator.Coordinator/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).Delete(ctx, req.(*File))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_Train_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hyperparameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).Train(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coordinator.Coordinator/Train",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).Train(ctx, req.(*Hyperparameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_Inference_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CoordinatorServer).Inference(&coordinatorInferenceServer{stream})
}

type Coordinator_InferenceServer interface {
	Send(*QueryResults) error
	Recv() (*Query, error)
	grpc.ServerStream
}

type coordinatorInferenceServer struct {
	grpc.ServerStream
}

func (x *coordinatorInferenceServer) Send(m *QueryResults) error {
	return x.ServerStream.SendMsg(m)
}

func (x *coordinatorInferenceServer) Recv() (*Query, error) {
	m := new(Query)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Coordinator_GetRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Model)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).GetRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coordinator.Coordinator/GetRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).GetRate(ctx, req.(*Model))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Model)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coordinator.Coordinator/Stats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).Stats(ctx, req.(*Model))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_SetBatchSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Model)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).SetBatchSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coordinator.Coordinator/SetBatchSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).SetBatchSize(ctx, req.(*Model))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_ShowJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).ShowJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coordinator.Coordinator/ShowJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).ShowJobs(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_GetResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).GetResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coordinator.Coordinator/GetResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).GetResults(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_CreateModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).CreateModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coordinator.Coordinator/CreateModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).CreateModel(ctx, req.(*ModelInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_UpdateModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelStats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).UpdateModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coordinator.Coordinator/UpdateModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).UpdateModel(ctx, req.(*ModelStats))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_UpdateJobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Status)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).UpdateJobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coordinator.Coordinator/UpdateJobStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).UpdateJobStatus(ctx, req.(*Status))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_Join_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CoordinatorServer).Join(&coordinatorJoinServer{stream})
}

type Coordinator_JoinServer interface {
	SendAndClose(*Ack) error
	Recv() (*Heartbeat, error)
	grpc.ServerStream
}

type coordinatorJoinServer struct {
	grpc.ServerStream
}

func (x *coordinatorJoinServer) SendAndClose(m *Ack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *coordinatorJoinServer) Recv() (*Heartbeat, error) {
	m := new(Heartbeat)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Coordinator_UpdateNetworkInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).UpdateNetworkInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coordinator.Coordinator/UpdateNetworkInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).UpdateNetworkInfo(ctx, req.(*NetworkInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_DeleteNetworkInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNetwork)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).DeleteNetworkInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coordinator.Coordinator/DeleteNetworkInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).DeleteNetworkInfo(ctx, req.(*DeleteNetwork))
	}
	return interceptor(ctx, in, info, handler)
}

// Coordinator_ServiceDesc is the grpc.ServiceDesc for Coordinator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Coordinator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coordinator.Coordinator",
	HandlerType: (*CoordinatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListFiles",
			Handler:    _Coordinator_ListFiles_Handler,
		},
		{
			MethodName: "Store",
			Handler:    _Coordinator_Store_Handler,
		},
		{
			MethodName: "GetMembers",
			Handler:    _Coordinator_GetMembers_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _Coordinator_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Coordinator_Get_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _Coordinator_GetVersion_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Coordinator_Delete_Handler,
		},
		{
			MethodName: "Train",
			Handler:    _Coordinator_Train_Handler,
		},
		{
			MethodName: "GetRate",
			Handler:    _Coordinator_GetRate_Handler,
		},
		{
			MethodName: "Stats",
			Handler:    _Coordinator_Stats_Handler,
		},
		{
			MethodName: "SetBatchSize",
			Handler:    _Coordinator_SetBatchSize_Handler,
		},
		{
			MethodName: "ShowJobs",
			Handler:    _Coordinator_ShowJobs_Handler,
		},
		{
			MethodName: "GetResults",
			Handler:    _Coordinator_GetResults_Handler,
		},
		{
			MethodName: "CreateModel",
			Handler:    _Coordinator_CreateModel_Handler,
		},
		{
			MethodName: "UpdateModel",
			Handler:    _Coordinator_UpdateModel_Handler,
		},
		{
			MethodName: "UpdateJobStatus",
			Handler:    _Coordinator_UpdateJobStatus_Handler,
		},
		{
			MethodName: "UpdateNetworkInfo",
			Handler:    _Coordinator_UpdateNetworkInfo_Handler,
		},
		{
			MethodName: "DeleteNetworkInfo",
			Handler:    _Coordinator_DeleteNetworkInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Inference",
			Handler:       _Coordinator_Inference_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Join",
			Handler:       _Coordinator_Join_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/coordinator/coordinator.proto",
}
